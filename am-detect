#!/usr/bin/perl

use strict;
use Math::Trig qw(pip2 rad2deg);
use PDL::Lite;
use WWVB;
use vars qw(%args);

$| = 1;

sub adjust_mag {
  my($mag,$cutoff) = @_;

  return $mag + 0.5 - $cutoff; # shift the cutoff to 0.5
}

my(@history);
sub calculate_cutoff {
  my($mag) = @_;

  push(@history, $mag);
  if(@history > $args{SAMPLES_PER_SECOND}) { # use 1 second of data
    shift(@history);
  }
  my $history = pdl(\@history);
  my $pct90 = $history->pct(0.9);
  my $pct10 = $history->pct(0.1);
  return $pct90 - ($pct90-$pct10)/3; # TODO: does this need dapening?
}

sub print_level {
  my($mag, $arg, $print_magnitude) = @_;

  my $cutoff = calculate_cutoff($mag);
  
  my($am_level);
  if($mag > $cutoff) {
    $am_level = "H";
  } else {
    $am_level = "l";
  }

  if($print_magnitude) {
    print "$am_level".adjust_mag($cutoff,$mag)."\n";
  } else {
    print "$am_level".int(rad2deg($arg))."\n";
  }
}

sub arg {
  my($real,$imag) = @_;

  if($real == 0) {
    if($imag > 0) {
      return pip2;
    } elsif($imag < 0) {
      return -1 * pip2;
    } else {
      return -1000;
    }
  } else {
    return atan2($imag, $real);
  }
}

my($print_magnitude,$print_cutoff) = (0,0);
%args = WWVB::args(\@ARGV, "magnitude" => \$print_magnitude, "cutoff" => \$print_cutoff);
my(@levels);
my($real,$imag);
while(defined($real = <>) and defined($imag = <>)) {
  chomp($real);
  chomp($imag);
  my $mag = sqrt($real*$real + $imag*$imag);
  my $arg = arg($real,$imag);
  print_level($mag, $arg, $print_magnitude);
}
