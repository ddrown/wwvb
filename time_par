#!/usr/bin/perl

use strict;

# 01234567890123456789012345   01234
# 01011000110001100010011000 = 01001
# 11010010111001101011111000 = 10101

#    01234567890123456789012345
# p0 x x xxx xx   xxxxx  xx x
# p1  x x xxx xx   xxxxx  xx x
# p2   x x xxx xx   xxxxx  xx x
# p3 x xxx xx   xxxxx  xx x  x
# p4  x xxx xx   xxxxx  xx x  x

my(@timecodes) = (
  [qw( 0 2 4 5 6  8  9 13 14 15 16 17 20 21 23)],
  [qw( 1 3 5 6 7  9 10 14 15 16 17 18 21 22 24)],
  [qw( 2 4 6 7 8 10 11 15 16 17 18 19 22 23 25)],
  [qw( 0 2 3 4 6  7 11 12 13 14 15 18 19 21 24)],
  [qw( 1 3 4 5 7  8 12 13 14 15 16 19 20 22 25)],
);

my($expected) = $ARGV[1];

my(@bits) = split(//,$ARGV[0]);
my(@found);
for(my $c = 0; $c < @timecodes; $c++) {
  my $sum = 0;
  foreach my $index (@{ $timecodes[$c] }) {
    $sum += $bits[$index];
  }
  push(@found,$sum % 2);
}
if(length($expected)) {
  if(join("",@found) eq $expected) {
    print "ok\n";
  } else {
    print "failed ".join("",@found)." != $expected\n";
    my(@expected) = split(//,$expected);
    my($differences) = 0;
    my(%canidates);
    for(my $i = 0; $i < @found; $i++) {
      if($found[$i] != $expected[$i]) {
        $differences++;
        print "$i: differ\n";
        foreach my $canidate (@{ $timecodes[$i] }) {
          $canidates{$canidate}++;
        }
      } else {
        foreach my $canidate (@{ $timecodes[$i] }) {
          $canidates{$canidate}--;
        }
      }
    }
    if($differences == 1) {
      print "multi-bit error or parity wrong\n";
    } else {
      foreach my $canidate (keys %canidates) {
        if($canidates{$canidate} == $differences) {
          print "flip $canidate from ".$bits[$canidate]." to ".($bits[$canidate] ? 0 : 1)."\n";
        }
      }
    }
  }
} else {
  print join("",@found),"\n";
}
