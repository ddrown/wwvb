#!/usr/bin/perl

use strict;
use PDL;
use PDL::FFT;
use WWVB;
use vars qw(%args);
$| = 1;

my($rolling) = 0;
my($sample_size) = 256;
%args = WWVB::args(\@ARGV, "rolling" => \$rolling, "samples=i" => \$sample_size);

sub hz {
  my($sps,$bins,$bin) = @_;

  if($bin > ($bins/2 + 0.5)) {
    $bin = $bins - $bin;
    return -1 * $sps/$bins*$bin;
  }

  return $sps/$bins*$bin;
}

my(@real,@imag);
my $D = 1/$args{SAMPLES_PER_SECOND};
while(defined(my $real = <>) and defined(my $imaginary = <>)) {
  chomp($real);
  chomp($imaginary);
  push(@real,$real);
  push(@imag,$imaginary);
  if(@real == $sample_size) {
    my $real_pdl = pdl(\@real);
    my $imag_pdl = pdl(\@imag);
    fft($real_pdl, $imag_pdl);
    my $len = $real_pdl->nelem();
    my $sorted = $real_pdl->abs->qsorti();
    print "\nN=$sample_size L=$len HZbin=".($args{SAMPLES_PER_SECOND}/$len)."\n";
    for(my $i = 0; $i < 10; $i++) {
      print hz($sps,$len,$sorted->index($i)),"Hz=",$real_pdl->index($sorted->index($i)),"\n";
    }
    $sorted = $imag_pdl->abs->qsorti();
    print "------------------\n";
    for(my $i = 0; $i < 10; $i++) {
      print hz($sps,$len,$sorted->index($i)),"Hz=",$imag_pdl->index($sorted->index($i)),"\n";
    }
    if($rolling) {
      @r = @i = ();
    } else {
      $sample_size *= 2;
    }
  }
}

