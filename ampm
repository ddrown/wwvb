#!/usr/bin/perl
#
# http://www.nist.gov/pml/div688/grp40/upload/NIST-Enhanced-WWVB-Broadcast-Format-1_01-2013-11-06.pdf
# https://en.wikipedia.org/wiki/WWVB

use strict;
use WWVB;
use Statistics::LineFit;
use vars qw(%args);

$| = 1;

%args = WWVB::args(\@ARGV);

sub am_run {
  my($time,$power) = @_;

  return $power x int($args{SAMPLES_PER_SECOND} * $time);
}

my(%types) = (
 "E" => am_run(1,"1"),
 "e" => am_run(1,"0"),
 "M" => am_run(0.8,"0") . am_run(0.2,"1"),
 "1" => am_run(0.5,"0") . am_run(0.5,"1"),
 "0" => am_run(0.2,"0") . am_run(0.8,"1")
);

sub detect_type_am {
  my($am) = @_;

  my(%scores);
  foreach my $type (keys %types) {
    for(my $i = 0; $i < length($types{$type}); $i++) {
      if(substr($am,$i,1) eq substr($types{$type},$i,1)) {
        $scores{$type}++;
      }
    }
  }
  my(@score_list) = sort { $scores{$b} <=> $scores{$a} } keys %scores;
  # TODO: use scores to estimate noise and/or framing slips?

  return($score_list[0],$scores{$score_list[0]});
}

sub bcd {
  my($bits) = @_;
  my(@values) = qw(1 2 4 8 10 20 40 80 100 200);
  my($value) = 0;
  my(@bits) = split(//,$bits);
  for(my $i = 0; $i < @bits; $i++) {
    if($value > $values[$i]) {
      print STDERR "invalid BCD: $bits\n";
      return undef;
    }
    $value += ($bits[$i] eq "0") ? 0 : $values[$i];
  }
  return $value;
}

sub leap {
  my($leap) = @_;
  my(@leaps) = split(//,$leap);
  my(@messages);
  if($leaps[0] ne "0") {
    push(@messages, "leap second at end of month");
  }
  if($leaps[1] ne "0") {
    push(@messages, "leap year");
  }
  return join(" ",@messages);
}

sub dst { # note: bits come in backwards
  my($dst) = @_;
  if($dst eq "10") {
    return "DST ends today";
  } elsif($dst eq "11") {
    return "DST in effect";
  } elsif($dst eq "01") {
    return "DST begins today";
  } elsif($dst eq "00") {
    return "DST not in effect";
  }
}

sub print_data {
  my($data) = @_;
  my $str = "DUT:";
  if($data->{dut_s} eq "101") {
    $str .= "+";
  } elsif($data->{dut_s} eq "010") {
    $str .= "-";
  } else {
    $str .= "?";
  }
  $str .= bcd($data->{dut});
  $str .= " T:".bcd($data->{hour}).":".bcd($data->{minute}).":59";
  $str .= " D:".bcd($data->{day})." Y:".bcd($data->{year});
  $str .= " L:".leap($data->{leap});
  $str .= " DST:".dst($data->{dst});
  $str .= " E:".$data->{errors}."\n";
  print $str;
}

sub partial_data {
  my($data) = @_;
  print "partial\n";
  foreach my $key (keys %$data) {
    $data->{$key} =~ s/M/1/g; # assume all M's are 1's for data fields
  }
  print_data($data);
}

sub full_data {
  my($data) = @_;
  print "full\n";
  foreach my $key (keys %$data) {
    $data->{$key} =~ s/M/1/g; # assume all M's are 1's for data fields
  }
  print_data($data);
}

# meaning of each bit
# M=marker, m=minute, 0=reserved, h=hour, d=day, u=DUT sign, U=DUT, y=year, L=leap, D=DST
my(@times) = qw(
 M m m m 0 m m m m M 
 0 0 h h 0 h h h h M 
 0 0 d d 0 d d d d M 
 d d d d 0 0 u u u M
 U U U U 0 y y y y M 
 y y y y 0 L L D D M);

# assumption: @t ends at :59
sub decode_am_time {
  my(@t) = @_;
  my $second = 59;
  my(%data);
  for(my $i = $#t; $i >= 0; $i--) {
    if($times[$second] eq "0" or $times[$second] eq "M") {
      if($t[$i] ne $times[$second]) {
        $data{errors}++;
      }
    } elsif($times[$second] eq "m") {
      $data{minute} .= $t[$i];
    } elsif($times[$second] eq "h") {
      $data{hour} .= $t[$i];
    } elsif($times[$second] eq "d") {
      $data{day} .= $t[$i];
    } elsif($times[$second] eq "u") {
      $data{dut_s} .= $t[$i];
    } elsif($times[$second] eq "U") {
      $data{dut} .= $t[$i];
    } elsif($times[$second] eq "y") {
      $data{year} .= $t[$i];
    } elsif($times[$second] eq "L") {
      $data{leap} .= $t[$i];
    } elsif($times[$second] eq "D") {
      $data{dst} .= $t[$i];
    } else {
      die("unknown state for $second: $times[$second]");
    }
    $second--;
    if($second < 0) {
      full_data(\%data);
      %data = ();
      $second = 59;
    }
  }
  if(%data) {
    partial_data(\%data);
  }
}

sub linear_fit {
  my($pm) = @_;

  my(@pm_nowrap) = ($pm->[0]);
 
  my($offset,$last_raw) = (0,$pm->[0]);
  for(my $i = 1; $i < @$pm; $i++) {
    if($pm->[$i] < -100 and $last_raw > 100) {
      $offset += 360;
    } elsif($pm->[$i] > 100 and $last_raw < -100) {
      $offset -= 360;
    }
    $last_raw = $pm->[$i];
    push(@pm_nowrap, $pm->[$i]+$offset);
  }

  my(@counts) = (0..$#pm_nowrap);
  my $linefit = Statistics::LineFit->new();
  $linefit->setData(\@counts, \@pm_nowrap);
  my($intercept, $slope) = $linefit->coefficients();
  my $degrees_per_second = $slope * $args{SAMPLES_PER_SECOND};
  my $hz = $degrees_per_second / 360;
  return({hz => $hz, chi => $linefit->rSquared, ppm => ($hz/60000)*1000000});
}

my($last_angle,$last_value) = (0,0);
my(@fits,$count);
sub detect_type_pm {
  my($am,$pm) = @_;

  # skip the first 200ms, assuming framing is correct
  my(@pm) = splice(@$pm, int($args{SAMPLES_PER_SECOND}*0.200));
  if(not @pm) {
    return; # not enough data this run
  }
  my($min,$sum,$max);
  for(my $i = 0; $i < @pm; $i++) {
    $sum += $pm[$i];
    if(not defined($min) or $min > $pm[$i]) {
      $min = $pm[$i];
    }
    if(not defined($max) or $max < $pm[$i]) {
      $max = $pm[$i];
    }
  }

  my $avg = ($sum/scalar(@pm));
  my($diff) = $last_angle-$avg;
  if($diff > 180) {
    $diff = 360 - $diff;
  } elsif($diff < -180) {
    $diff = 360 + $diff;
  }
  if(abs($diff) > 90) {
    $last_value = ($last_value == 0) ? 1 : 0;
  }
  $last_angle = $avg;

  my $fit = linear_fit(\@pm);
  $count++;
  if($fit->{chi} != 1.0) { # drop it if it's too good
    push(@fits,$fit);
  }
  if($count == 60) {
    my(@index) = (0..$#fits);
    @index = sort { $fits[$a]{chi} <=> $fits[$b]{chi} } @index;
    my $max = $index[-1];
    my $min = $index[0];
    printf("maxchi phase drift/noise: %0.3f Hz (%0.3f ppm) (chi=%0.3f)\n",$fits[$max]{hz},$fits[$max]{ppm},$fits[$max]{chi});
    printf("minchi phase drift/noise: %0.3f Hz (%0.3f ppm) (chi=%0.3f)\n",$fits[$min]{hz},$fits[$min]{ppm},$fits[$min]{chi});
    print "data from ".scalar(@fits)."/$count seconds\n";
    @fits = ();
    $count = 0;
  }
  return($last_value,undef); # TODO: score
}

sub scan_am {
  my($s,$score,$am_types) = @_;

  if($am_types->[-1] eq "M") {
    printf("%d: marker (%d%%)\n",$s,$score/$args{SAMPLES_PER_SECOND}*100);
    if($am_types->[-2] eq "M") {
      print "$s: top of minute detected\n";
      decode_am_time(@$am_types);
      @$am_types = ();
    }
  } elsif($am_types->[-1] =~ /e/i) {
    printf("%d: error %s (%d%%)\n",$s,$am_types->[-1],$score/$args{SAMPLES_PER_SECOND}*100);
  }
}

sub full_pm_data {
  my($data) = @_;

  print "[pm] full data: ",
        "s=",$data->{sync},
        ",p=",$data->{parity},
        ",t=",$data->{minute_of_century},
        ",T=",$data->{t0},
        ",R=",$data->{reserved},
        ",l=",$data->{dst_ls},
        ",N=",$data->{notice},
        ",n=",$data->{dst_next},
        "\n";
}

sub partial_pm_data {
  my($data) = @_;

  print "[pm] partial data: ",
        "s=",$data->{sync},
        ",p=",$data->{parity},
        ",t=",$data->{minute_of_century},
        ",T=",$data->{t0},
        ",R=",$data->{reserved},
        ",l=",$data->{dst_ls},
        ",N=",$data->{notice},
        ",n=",$data->{dst_next},
        "\n";
}

# p = parity, t = minute of century, T = duplicate t0, R = reserved, l = dst_ls, N = notice, n = dst_next, s = sync
my(@pm_times) = qw(
 s s s s s s s s s s 
 s s s p p p p p t T 
 t t t t t t t t t R 
 t t t t t t t t t R
 t t t t t t t l l N 
 l l l n n n n n n s
);

# assumption: @t ends at :12, the end of the sync code
sub decode_pm_time {
  my(@t) = @_;
  my $second = 12;
  my(%data);
  for(my $i = $#t; $i >= 0; $i--) {
    if($pm_times[$second] eq "R") { # reserved, ignore
      $data{reserved} .= $t[$i];
    } elsif($pm_times[$second] eq "p") {
      $data{parity} .= $t[$i];
    } elsif($pm_times[$second] eq "t") {
      $data{minute_of_century} .= $t[$i];
    } elsif($pm_times[$second] eq "T") {
      $data{t0} .= $t[$i];
    } elsif($pm_times[$second] eq "l") {
      $data{dst_ls} .= $t[$i];
    } elsif($pm_times[$second] eq "N") {
      $data{notice} .= $t[$i];
    } elsif($pm_times[$second] eq "n") {
      $data{dst_next} .= $t[$i];
    } elsif($pm_times[$second] eq "s") {
      $data{sync} .= $t[$i];
    } else {
      die("unknown state for $second: $pm_times[$second]");
    }
    $second--;
    if($second < 0) {
      $second = 59;
    } elsif($second == 12) {
      if($data{sync} eq "11101001000111") { # 180 degrees out of phase
        foreach my $key (keys %data) {
          $data{$key} =~ s/0/_/g;
          $data{$key} =~ s/1/0/g;
          $data{$key} =~ s/_/1/g;
        }
      }
      full_pm_data(\%data);
      %data = ();
    }
  }
  if(%data) {
    partial_pm_data(\%data);
  }
}

# differential coding: 0=different, 1=same
# sync[13..0] = 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0
my(@pm_sync) = (   1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1);
sub scan_pm {
  my($s,$score,$pm_types) = @_;

  my(@differences) = ();
  for(my $i = 1; $i < @$pm_types; $i++) {
    if($pm_types->[$i] != $pm_types->[$i-1]) {
      push(@differences, 0);
    } else {
      push(@differences, 1);
    }
  }

  for(my $i = 0; $i < @differences; $i++) {
    if($differences[$i] == $pm_sync[0]) {
      my $j;
      for($j = 1; $j < @pm_sync and $j + $i < @differences; $j++) {
        if($differences[$i+$j] != $pm_sync[$j]) {
          last;
        }
      }
      if($j == @pm_sync and $differences[$i+$j-1] == $pm_sync[$j-1]) {
        print "$s: found end of pm sync\n";
        decode_pm_time(@$pm_types);
        @$pm_types = ();
      }
    }
  }
}

my($s) = 0;
my(@am_types,@pm_types);
while(my $f = <>) {
  chomp($f);
  $s++;

  my($am) = $f;
  $am =~ s/[-0-9]*//g; # remove phase data
  $am =~ s/l/0/g;
  $am =~ s/H/1/g;
  my($type,$score) = detect_type_am($am);
  push(@am_types, $type);
  scan_am($s,$score,\@am_types);

  my(@pm) = split(/[lH]/,$f); # remove am data
  my($type,$score) = detect_type_pm($am,\@pm);
  push(@pm_types,$type);
  scan_pm($s,$score,\@pm_types); 
}
